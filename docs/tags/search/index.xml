<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Search on My New Hugo Site</title>
    <link>https://emlaver.github.io/tags/search/</link>
    <description>Recent content in Search on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://emlaver.github.io/tags/search/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple Geospatial Queries</title>
      <link>https://emlaver.github.io/2022/06/28/Simple-Geospatial-Queries.html</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2022/06/28/Simple-Geospatial-Queries.html</guid>
      <description>In this blog post I&amp;rsquo;ll show how to perform basic Geospatial queries using standard Cloudant secondary indexes:
Find documents within a &amp;ldquo;rectangle&amp;rdquo;. Find the nearest. Photo by Adolfo FÃ©lix on Unsplash
The data To demonstrate, I&amp;rsquo;ll use a dataset containing GeoJSON - an industry-standard JSON representation of geographical content. My database contains a number of &amp;ldquo;features&amp;rdquo; represented by a decimal latitude,longitude point representing the WGS84 coordinate of the feature. Other attributes of the feature are stored in the properties object.</description>
    </item>
    
    <item>
      <title>Building a Store Finder</title>
      <link>https://emlaver.github.io/2020/05/01/Building-A-Store-Finder.html</link>
      <pubDate>Fri, 01 May 2020 06:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2020/05/01/Building-A-Store-Finder.html</guid>
      <description>In this post we&amp;rsquo;ll be creating a web-based store finder using Cloudant. A user visits your website and wants to know which of your branches is closest to their current location.
Photo by Sherzod Max on Unsplash
To build this need a search index that can sort search results by distance but first, we need a database of branches.
Data preparation Let&amp;rsquo;s say we have a list of branches that looks like this:</description>
    </item>
    
    <item>
      <title>Case-sensitivity in queries</title>
      <link>https://emlaver.github.io/2019/11/08/Case-sensitivity-in-queries.html</link>
      <pubDate>Fri, 08 Nov 2019 06:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2019/11/08/Case-sensitivity-in-queries.html</guid>
      <description>By default, some Cloudant operations are case sensitive - the query parameter must match the value in the document exactly for it to be included in search results - but if you need a case insensitive query then there are number of solutions.
Photo by Amador Loureiro on Unsplash
Let&amp;rsquo;s see how each of the Cloudant query mechanisms handle case sensitivity with a database of cars whose documents look like this which we need to query by the &amp;ldquo;model&amp;rdquo; attribute:</description>
    </item>
    
    <item>
      <title>Fuzzy search using Double Metaphone</title>
      <link>https://emlaver.github.io/2019/08/08/fuzzy-search-using-the-double-metaphone-algorithm.html</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2019/08/08/fuzzy-search-using-the-double-metaphone-algorithm.html</guid>
      <description>Introduction In an earlier article I explained how to do a fuzzy search for documents that contain words that sound like some other given word. The technique I described there uses a view that implements the Soundex algorithm. The aim of the Soundex algorithm is to encode words alike that sound alike so that they can be matched despite minor differences in spelling. Soundex was invented before the invention of the electronic computer and is fairly simple.</description>
    </item>
    
    <item>
      <title>Paging with Bookmarks</title>
      <link>https://emlaver.github.io/2019/05/31/Paging-with-Cloudant-Bookmarks.html</link>
      <pubDate>Fri, 31 May 2019 06:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2019/05/31/Paging-with-Cloudant-Bookmarks.html</guid>
      <description>Imagine you are creating a web application showing a set of search results, whether they be books, actors or products in your store. As the user scrolls to the bottom of the search results, another page of matches is appended to the bottom. This is known as an &amp;ldquo;infinite scroll&amp;rdquo; design pattern and allows the user to endlessly scroll through a large data set with ease, while only fetching a smaller batches of data from the database each time.</description>
    </item>
    
    <item>
      <title>Search Analyzers</title>
      <link>https://emlaver.github.io/2018/10/19/Search-Analyzers.html</link>
      <pubDate>Fri, 19 Oct 2018 06:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2018/10/19/Search-Analyzers.html</guid>
      <description>Cloudant Search is the free-text search technology built in to the Cloudant database that is powered by Apache Lucene. Lucene-based indexes are used for:
finding documents that best match a supplied string. constructing fielded queries in Lucene&amp;rsquo;s query language e.g. state:florida AND (status:provisional OR status:published). counting facets, that is counts of repeating values within the result set. or all of the above. When creating a Cloudant Search index, thought must be given as to which fields from your documents need to indexed and how they are to be indexed.</description>
    </item>
    
    <item>
      <title>Searching Jekyll Sites</title>
      <link>https://emlaver.github.io/2018/08/10/Adding-Search-to-a-Static-Jekyll-site.html</link>
      <pubDate>Fri, 10 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://emlaver.github.io/2018/08/10/Adding-Search-to-a-Static-Jekyll-site.html</guid>
      <description>I&amp;rsquo;m a big fan of Jekyll for building static websites. If you&amp;rsquo;re not familiar with Jekyll, it takes a collection of configuration, templates and source files (I write my posts in Markdown) and transforms them into static HTML files that can be delivered to the world by any web server. Jekyll is built into GitHub Pages so that you can host the source files for your website or blog in a Git repository and have the resultant static web site served out by GitHub Pages without having to manage any server infrastructure yourself.</description>
    </item>
    
  </channel>
</rss>
